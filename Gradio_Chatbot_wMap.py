# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jtgSuor4-rCjovSyG3JieqEKdkfAATWh
"""

#! pip install gradio

import gradio as gr
import requests
import spacy
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from config import geoapify_key, open_weather_key
import pandas as pd

csv_file = "Resources/queries.csv"
df = pd.read_csv(csv_file)

X = df['Query']
y = df['Category']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = Pipeline([
    ('vectorizer', CountVectorizer()),
    ('classifier', MultinomialNB())
])
model.fit(X_train, y_train)
accuracy = model.score(X_test, y_test)
print(f"Model Accuracy: {accuracy * 100:.2f}%")

def predict_intent(user_input):
    user_input = user_input.lower()
    return model.predict([user_input])[0]

# Load pre-trained spaCy model
nlp = spacy.load('en_core_web_sm')

def extract_entities(user_input):
    doc = nlp(user_input)
    entities = {ent.label_: ent.text for ent in doc.ents}
    return entities

def get_weather(location):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={open_weather_key}&units=imperial"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data
    else:
        return None

def get_restaurants(location):
    geocoding_url = f"https://api.geoapify.com/v1/geocode/search?text={location}&apiKey={geoapify_key}"
    geo_response = requests.get(geocoding_url)
    if geo_response.status_code == 200:
        geo_data = geo_response.json()
        if geo_data['features']:
            coordinates = geo_data['features'][0]['geometry']['coordinates']
            longitude, latitude = coordinates[0], coordinates[1]
        else:
            return ["Location not found."]
    else:
        return [f"Failed to fetch location data. Error code: {geo_response.status_code}"]

    endpoint_url = "https://api.geoapify.com/v2/places"
    radius = 1000
    filters = f"circle:{longitude},{latitude},{radius}"
    bias = f"proximity:{longitude},{latitude}"
    categories = "catering.restaurant"
    params = {
        "filter": filters,
        "limit": 20,
        "bias": bias,
        "categories": categories,
        "apiKey": geoapify_key
    }
    response = requests.get(endpoint_url, params=params)
    if response.status_code == 200:
        results = response.json().get('features', [])
        if results:
            restaurant_names = [result['properties'].get('name') for result in results if result['properties'].get('name') and result['properties'].get('name') != 'Unnamed']
            return restaurant_names if restaurant_names else ["No restaurants found."]
        else:
            return ["No restaurants found."]
    else:
        print(f"Response JSON: {response.json()}")
        return [f"Failed to fetch restaurant data. Error code: {response.status_code}"]

def get_hotels(location):
    geocoding_url = f"https://api.geoapify.com/v1/geocode/search?text={location}&apiKey={geoapify_key}"
    geo_response = requests.get(geocoding_url)
    if geo_response.status_code == 200:
        geo_data = geo_response.json()
        if geo_data['features']:
            coordinates = geo_data['features'][0]['geometry']['coordinates']
            longitude, latitude = coordinates[0], coordinates[1]
        else:
            return ["Location not found."]
    else:
        return [f"Failed to fetch location data. Error code: {geo_response.status_code}"]

    endpoint_url = "https://api.geoapify.com/v2/places"
    radius = 1000
    filters = f"circle:{longitude},{latitude},{radius}"
    bias = f"proximity:{longitude},{latitude}"
    categories = "accommodation.hotel"
    params = {
        "filter": filters,
        "limit": 20,
        "bias": bias,
        "categories": categories,
        "apiKey": geoapify_key
    }
    response = requests.get(endpoint_url, params=params)
    if response.status_code == 200:
        results = response.json().get('features', [])
        if results:
            hotel_names = [result['properties'].get('name') for result in results if result['properties'].get('name') and result['properties'].get('name') != 'Unnamed']
            return hotel_names if hotel_names else ["No hotels found."]
        else:
            return ["No hotels found."]
    else:
        print(f"Response JSON: {response.json()}")
        return [f"Failed to fetch hotel data. Error code: {response.status_code}"]

def generate_response(intent, entities, user_response=None, follow_up_stage=0):
    if follow_up_stage == 1:
        location = entities.get('GPE', 'unknown location')
        if user_response.lower() == "yes":
            weather_data = get_weather(location)
            if weather_data:
                description = weather_data['weather'][0]['description']
                temp_fahrenheit = weather_data['main']['temp']
                weather_response = f"The temperature in {location} is currently {temp_fahrenheit}°F with {description}."
                return f"{weather_response} Would you like to see hotels in {location}? (yes/no)", 2
            else:
                return "Sorry, I couldn't retrieve the weather information right now.", 0
        else:
            return f"Would you like to see hotels in {location}? (yes/no)", 2

    elif follow_up_stage == 2:  # After asking about hotels
        if user_response.lower() == "yes":
            location = entities.get('GPE', 'unknown location')
            hotels_data = get_hotels(location)
            if hotels_data:
                hotel_response = "Hotels:\n" + "\n".join(hotels_data)
                return f"{hotel_response}\nWould you like to see restaurants in {location}? (yes/no)", 3
            else:
                return "Sorry, I couldn't find any hotels at that location right now.", 0
        else:
            return "Okay, let me know if there's anything else you'd like to know!", 0

    elif follow_up_stage == 3:  # After asking about restaurants
        if user_response.lower() == "yes":
            location = entities.get('GPE', 'unknown location')
            restaurants_data = get_restaurants(location)
            if restaurants_data:
                restaurant_response = "Restaurants:\n" + "\n".join(restaurants_data)
                return f"{restaurant_response}", 0
            else:
                return "Sorry, I couldn't find any restaurants at that location right now.", 0
        else:
            return "Okay, let me know if there's anything else you'd like to know!", 0

    # Initial user input processing
    if intent == "city_query":
        location = entities.get('GPE')
        if location:
            return f"Do you want to know the weather for {location}? (yes/no)", 1
        else:
            return "I didn't catch the location. Could you please specify?", 0

    elif intent == "weather_query":
        location = entities.get('GPE')
        weather_data = get_weather(location)
        if weather_data:
            description = weather_data['weather'][0]['description']
            temp_fahrenheit = weather_data['main']['temp']
            return f"The temperature in {location} is currently {temp_fahrenheit}°F with {description}.", 0
        else:
            return "Sorry, I couldn't retrieve the weather information right now.", 0

    elif intent == "restaurant_query":
        location = entities.get('GPE')
        restaurants_data = get_restaurants(location)
        if restaurants_data:
            restaurant_response = "Restaurants:\n" + "\n".join(restaurants_data)
            return f"{restaurant_response}", 0
        else:
            return "Sorry, I couldn't find any restaurants at that location right now.", 0

    elif intent == "hotel_query":
        location = entities.get('GPE')
        hotels_data = get_hotels(location)
        if hotels_data:
            hotel_response = "Hotels:\n" + "\n".join(hotels_data)
            return f"{hotel_response}", 0
        else:
            return "Sorry, I couldn't find any hotels at that location right now.", 0

    else:
        return "I'm not sure how to help with that.", 0

def chatbot_response(user_input, follow_up_stage=0):
    intent = predict_intent(user_input)
    entities = extract_entities(user_input)
    response, next_stage = generate_response(intent, entities, user_input, follow_up_stage)
    return response, next_stage

def gradio_interface(destination, weather_input, restaurant_input, hotel_input, follow_up_stage=0):
    weather_response, next_stage_weather = "", 0
    restaurant_response, next_stage_restaurant = "", 0
    hotel_response, next_stage_hotel = "", 0

    # Process the destination input
    if destination.strip():
        intent = predict_intent(destination)
        entities = extract_entities(destination)
        destination_response, next_stage = generate_response(intent, entities, destination, follow_up_stage)

    # Process the weather input
    if weather_input.strip():
        weather_response, next_stage_weather = chatbot_response(weather_input, follow_up_stage)

    # Process the restaurant input
    if restaurant_input.strip():
        restaurant_response, next_stage_restaurant = chatbot_response(restaurant_input, follow_up_stage)

    # Process the hotel input
    if hotel_input.strip():
        hotel_response, next_stage_hotel = chatbot_response(hotel_input, follow_up_stage)

    return weather_response, restaurant_response, hotel_response

iface = gr.Interface(
    fn=gradio_interface,
    inputs=[
        gr.Textbox(label="Enter your destination"),
        gr.Textbox(label="Ask about your destination's weather"),
        gr.Textbox(label="Ask about restaurants near your destination"),
        gr.Textbox(label="Ask about hotels near your destination")
    ],
    outputs=[
        gr.Textbox(label="Destination's Weather"),
        gr.Textbox(label="Destination's Restaurants"),
        gr.Textbox(label="Destination's Hotels")
    ],
    live=True,
    theme="dark",
    title="Voyage Vibes"
)

iface.launch()