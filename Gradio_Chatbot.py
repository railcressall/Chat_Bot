# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jtgSuor4-rCjovSyG3JieqEKdkfAATWh
"""

! pip install gradio

import gradio as gr
import requests
import spacy
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from config import geoapify_key, open_weather_key

# Sample data for training
data = [
    ("I want to travel to Houston", "city_query"),
    ("I wanna go to Salt Lake City", "city_query"),
    ("I want to visit Chicago", "city_query"),
    ("Oregon", "city_query"),
    ("San Diego", "city_query"),
    ("Boston", "city_query"),
    ("Las Vegas", "city_query"),
    ("Tucson", "city_query"),
    ("El Paso", "city_query"),
    ("Boise", "city_query"),
    ("What's the weather like?", "weather_query"),
    ("Can you tell me the weather in Chicago?", "weather_query"),
    ("What's the temperature in Seattle?", "weather_query"),
    ("Help me with the weather forecast", "weather_query"),
    ("How hot is it in San Francisco?", "weather_query"),
    ("Food in San Jose", "restaurant_query"),
    ("Restaurants in Phoenix", "restaurant_query"),
    ("Are there any restaurants in Baltimore?", "restaurant_query"),
    ("I wanna grab food in Detroit", "restaurant_query"),
    ("Places to eat in Austin", "restaurant_query"),
    ("Hotels in New York City", "hotel_query"),
    ("Where can I stay in Los Angeles?", "hotel_query"),
    ("Find me a place to stay in Miami", "hotel_query"),
    ("Accommodations in Orlando", "hotel_query"),
    ("Are there any hotels in Denver?", "hotel_query"),
    ("Looking for a hotel in Nashville", "hotel_query"),
    ("Where to stay in Atlanta", "hotel_query"),
    ("Book a hotel in Dallas", "hotel_query"),
    ("Best hotels in Seattle", "hotel_query"),
    ("Can you suggest a hotel in Las Vegas?", "hotel_query"),
    ("Show me places in Austin", "city_query"),
    ("I need information about Seattle", "city_query"),
    ("Tell me about places to visit in Denver", "city_query"),
    ("What's happening in Portland?", "city_query"),
    ("I’m looking for details about Orlando", "city_query"),
    ("Give me info on Philadelphia", "city_query"),
    ("What’s going on in Miami?", "city_query"),
    ("I want to know about San Francisco", "city_query"),
    ("Can you tell me about Boston?", "city_query"),
    ("I’m interested in New Orleans", "city_query"),
    ("What's the current weather in Boston?", "weather_query"),
    ("How's the weather in New York City today?", "weather_query"),
    ("Tell me the temperature in Denver", "weather_query"),
    ("What's the forecast for Miami?", "weather_query"),
    ("Can you give me the weather report for Chicago?", "weather_query"),
    ("Is it raining in Seattle?", "weather_query"),
    ("How cold is it in Minneapolis?", "weather_query"),
    ("What's the humidity like in San Diego?", "weather_query"),
    ("Tell me if it’s sunny in Las Vegas", "weather_query"),
    ("What’s the weather in San Jose?", "weather_query"),
    ("Where can I eat in Dallas?", "restaurant_query"),
    ("Find me some good restaurants in San Diego", "restaurant_query"),
    ("What are the top places to eat in Houston?", "restaurant_query"),
    ("Any restaurant recommendations for Seattle?", "restaurant_query"),
    ("Show me dining options in San Francisco", "restaurant_query"),
    ("Are there any good eateries in Portland?", "restaurant_query"),
    ("Where can I get food in Miami?", "restaurant_query"),
    ("Best places to eat in Austin", "restaurant_query"),
    ("Restaurant suggestions for New York City", "restaurant_query"),
    ("Where should I dine in Chicago?", "restaurant_query"),
    ("What are the best hotels in San Francisco?", "hotel_query"),
    ("Find hotels in Seattle for me", "hotel_query"),
    ("Where can I stay in Boston?", "hotel_query"),
    ("Can you recommend hotels in Los Angeles?", "hotel_query"),
    ("What’s a good place to stay in Miami?", "hotel_query"),
    ("Show me hotel options in Dallas", "hotel_query"),
    ("Find accommodation in San Diego", "hotel_query"),
    ("Hotels available in New York City?", "hotel_query"),
    ("Suggest a hotel in Denver", "hotel_query"),
    ("Where can I book a hotel in Chicago?", "hotel_query"),
    ("Where to stay in Las Vegas", "hotel_query"),
    ("I want to visit a new city", "city_query"),
    ("Tell me about the local weather", "weather_query"),
    ("Where can I find places to eat?", "restaurant_query"),
    ("Find me a place to stay", "hotel_query"),
    ("I’m planning a trip to Washington, D.C.", "city_query"),
    ("What's the best way to get to New Orleans?", "city_query"),
    ("What's the weather like in San Antonio?", "weather_query"),
    ("Is it going to snow in Denver?", "weather_query"),
    ("Are there any vegetarian restaurants in Portland?", "restaurant_query"),
    ("Can you recommend a seafood restaurant in Boston?", "restaurant_query"),
    ("Looking for a cheap place to stay in Las Vegas", "hotel_query"),
    ("I need a hotel with a pool in Miami", "hotel_query"),
    ("What's the weather forecast for next week in Seattle?", "weather_query"),
    ("Can you find me a pet-friendly hotel in San Diego?", "hotel_query"),
    ("Where can I find a good sushi restaurant in Los Angeles?", "restaurant_query"),
    ("Are there any Michelin star restaurants in Chicago?", "restaurant_query"),
    ("Is there a good hotel near the beach in San Francisco?", "hotel_query"),
    ("Can you find a hotel with a gym in New York City?", "hotel_query"),
    ("What are the best hotels with free breakfast in Dallas?", "hotel_query"),
    ("Where can I get Italian food in New York City?", "restaurant_query"),
    ("Are there any hotels with spa services in Las Vegas?", "hotel_query"),
    ("What's the weather like in Orlando in December?", "weather_query"),
    ("Can you suggest a romantic restaurant in Paris?", "restaurant_query"),
    ("I need a budget hotel in Tokyo", "hotel_query"),
    ("Are there any good Chinese restaurants in San Francisco?", "restaurant_query"),
    ("What's the current weather in Houston?", "weather_query"),
    ("Are there any family-friendly hotels in Chicago?", "hotel_query"),
    ("Find me a luxury hotel in Los Angeles", "hotel_query"),
    ("What's the best seafood restaurant in Miami?", "restaurant_query"),
    ("Can you find a hotel near the airport in Boston?", "hotel_query"),
    ("Where can I find vegan food in Austin?", "restaurant_query"),
    ("Are there any bed and breakfasts in Seattle?", "hotel_query"),
    ("Can you recommend a quiet hotel in San Diego?", "hotel_query"),
    ("I need a hotel room with a view in New York City", "hotel_query"),
    ("Are there any rooftop restaurants in Los Angeles?", "restaurant_query"),
    ("What's the humidity level in Miami right now?", "weather_query"),
    ("Can you find me a dog-friendly restaurant in Chicago?", "restaurant_query"),
    ("What are the best budget hotels in Denver?", "hotel_query"),
    ("Is there a popular bar in San Francisco?", "restaurant_query"),
    ("Can you find a hotel with free parking in Seattle?", "hotel_query"),
    ("Where can I get Mexican food in San Diego?", "restaurant_query"),
    ("What’s the best breakfast place in Boston?", "restaurant_query"),
    ("Are there any 5-star hotels in Las Vegas?", "hotel_query"),
    ("What's the weather like in New York City during the summer?", "weather_query"),
    ("Are there any 24-hour restaurants in Austin?", "restaurant_query"),
    ("Where can I find gluten-free food in Portland?", "restaurant_query"),
    ("Can you suggest a beachfront hotel in Miami?", "hotel_query"),
    ("What's the best time to visit Chicago?", "city_query"),
    ("Is it safe to travel to New Orleans?", "city_query"),
    ("Can you find a hotel with a hot tub in Los Angeles?", "hotel_query"),
    ("What’s the current weather in Las Vegas?", "weather_query"),
    ("Where can I find barbecue in Houston?", "restaurant_query"),
    ("Is there a good bakery in San Francisco?", "restaurant_query"),
    ("Are there any hotels with family suites in Orlando?", "hotel_query"),
    ("Where can I get the best pizza in New York City?", "restaurant_query"),
    ("Can you suggest a hotel in Dallas with a conference room?", "hotel_query"),
    ("What’s the weather like in Chicago during winter?", "weather_query"),
    ("Are there any good brunch spots in Seattle?", "restaurant_query"),
    ("Where can I find a late-night diner in Portland?", "restaurant_query"),
    ("Can you find a hotel with an indoor pool in Denver?", "hotel_query"),
    ("What are the best places to eat in New Orleans?", "restaurant_query"),
    ("Where can I find a boutique hotel in San Francisco?", "hotel_query")
]

X, y = zip(*data)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = Pipeline([
    ('vectorizer', CountVectorizer()),
    ('classifier', MultinomialNB())
])
model.fit(X_train, y_train)
accuracy = model.score(X_test, y_test)
print(f"Model Accuracy: {accuracy * 100:.2f}%")

def predict_intent(user_input):
    user_input = user_input.lower()
    return model.predict([user_input])[0]

# Load pre-trained spaCy model
nlp = spacy.load('en_core_web_sm')

def extract_entities(user_input):
    doc = nlp(user_input)
    entities = {ent.label_: ent.text for ent in doc.ents}
    return entities

def get_weather(location):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={open_weather_key}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data
    else:
        return None

def get_restaurants(location):
    geocoding_url = f"https://api.geoapify.com/v1/geocode/search?text={location}&apiKey={geoapify_key}"
    geo_response = requests.get(geocoding_url)
    if geo_response.status_code == 200:
        geo_data = geo_response.json()
        if geo_data['features']:
            coordinates = geo_data['features'][0]['geometry']['coordinates']
            longitude, latitude = coordinates[0], coordinates[1]
        else:
            return ["Location not found."]
    else:
        return [f"Failed to fetch location data. Error code: {geo_response.status_code}"]

    endpoint_url = "https://api.geoapify.com/v2/places"
    radius = 1000
    filters = f"circle:{longitude},{latitude},{radius}"
    bias = f"proximity:{longitude},{latitude}"
    categories = "catering.restaurant"
    params = {
        "filter": filters,
        "limit": 20,
        "bias": bias,
        "categories": categories,
        "apiKey": geoapify_key
    }
    response = requests.get(endpoint_url, params=params)
    if response.status_code == 200:
        results = response.json().get('features', [])
        if results:
            restaurant_names = [result['properties'].get('name') for result in results if result['properties'].get('name') and result['properties'].get('name') != 'Unnamed']
            return restaurant_names if restaurant_names else ["No restaurants found."]
        else:
            return ["No restaurants found."]
    else:
        print(f"Response JSON: {response.json()}")
        return [f"Failed to fetch restaurant data. Error code: {response.status_code}"]

def get_hotels(location):
    geocoding_url = f"https://api.geoapify.com/v1/geocode/search?text={location}&apiKey={geoapify_key}"
    geo_response = requests.get(geocoding_url)
    if geo_response.status_code == 200:
        geo_data = geo_response.json()
        if geo_data['features']:
            coordinates = geo_data['features'][0]['geometry']['coordinates']
            longitude, latitude = coordinates[0], coordinates[1]
        else:
            return ["Location not found."]
    else:
        return [f"Failed to fetch location data. Error code: {geo_response.status_code}"]

    endpoint_url = "https://api.geoapify.com/v2/places"
    radius = 1000
    filters = f"circle:{longitude},{latitude},{radius}"
    bias = f"proximity:{longitude},{latitude}"
    categories = "accommodation.hotel"
    params = {
        "filter": filters,
        "limit": 20,
        "bias": bias,
        "categories": categories,
        "apiKey": geoapify_key
    }
    response = requests.get(endpoint_url, params=params)
    if response.status_code == 200:
        results = response.json().get('features', [])
        if results:
            hotel_names = [result['properties'].get('name') for result in results if result['properties'].get('name') and result['properties'].get('name') != 'Unnamed']
            return hotel_names if hotel_names else ["No hotels found."]
        else:
            return ["No hotels found."]
    else:
        print(f"Response JSON: {response.json()}")
        return [f"Failed to fetch hotel data. Error code: {response.status_code}"]

def generate_response(intent, entities, user_response=None, follow_up_stage=0):
    if follow_up_stage == 1:
        location = entities.get('GPE', 'unknown location')
        if user_response.lower() == "yes":
            weather_data = get_weather(location)
            if weather_data:
                description = weather_data['weather'][0]['description']
                temp_kelvin = weather_data['main']['temp']
                temp_fahrenheit = round((temp_kelvin - 273.15) * 9/5 + 32)
                weather_response = f"The temperature in {location} is currently {temp_fahrenheit}°F with {description}."
                return f"{weather_response} Would you like to see hotels in {location}? (yes/no)", 2
            else:
                return "Sorry, I couldn't retrieve the weather information right now.", 0
        else:
            return f"Would you like to see hotels in {location}? (yes/no)", 2

    elif follow_up_stage == 2:  # After asking about hotels
        if user_response.lower() == "yes":
            location = entities.get('GPE', 'unknown location')
            hotels_data = get_hotels(location)
            if hotels_data:
                hotel_response = "Hotels:\n" + "\n".join(hotels_data)
                return f"{hotel_response}\nWould you like to see restaurants in {location}? (yes/no)", 3
            else:
                return "Sorry, I couldn't find any hotels at that location right now.", 0
        else:
            return "Okay, let me know if there's anything else you'd like to know!", 0

    elif follow_up_stage == 3:  # After asking about restaurants
        if user_response.lower() == "yes":
            location = entities.get('GPE', 'unknown location')
            restaurants_data = get_restaurants(location)
            if restaurants_data:
                restaurant_response = "Restaurants:\n" + "\n".join(restaurants_data)
                return f"{restaurant_response}", 0
            else:
                return "Sorry, I couldn't find any restaurants at that location right now.", 0
        else:
            return "Okay, let me know if there's anything else you'd like to know!", 0

    # Initial user input processing
    if intent == "city_query":
        location = entities.get('GPE')
        if location:
            return f"Do you want to know the weather for {location}? (yes/no)", 1
        else:
            return "I didn't catch the location. Could you please specify?", 0

    elif intent == "weather_query":
        location = entities.get('GPE')
        weather_data = get_weather(location)
        if weather_data:
            description = weather_data['weather'][0]['description']
            temp_kelvin = weather_data['main']['temp']
            temp_fahrenheit = round((temp_kelvin - 273.15) * 9/5 + 32)
            return f"The temperature in {location} is currently {temp_fahrenheit}°F with {description}.", 0
        else:
            return "Sorry, I couldn't retrieve the weather information right now.", 0

    elif intent == "restaurant_query":
        location = entities.get('GPE')
        restaurants_data = get_restaurants(location)
        if restaurants_data:
            restaurant_response = "Restaurants:\n" + "\n".join(restaurants_data)
            return f"{restaurant_response}", 0
        else:
            return "Sorry, I couldn't find any restaurants at that location right now.", 0

    elif intent == "hotel_query":
        location = entities.get('GPE')
        hotels_data = get_hotels(location)
        if hotels_data:
            hotel_response = "Hotels:\n" + "\n".join(hotels_data)
            return f"{hotel_response}", 0
        else:
            return "Sorry, I couldn't find any hotels at that location right now.", 0

    else:
        return "I'm not sure how to help with that.", 0

def chatbot_response(user_input, follow_up_stage=0):
    intent = predict_intent(user_input)
    entities = extract_entities(user_input)
    response, next_stage = generate_response(intent, entities, user_input, follow_up_stage)
    return response, next_stage

def gradio_interface(destination, weather_input, restaurant_input, hotel_input, follow_up_stage=0):
    weather_response, next_stage_weather = "", 0
    restaurant_response, next_stage_restaurant = "", 0
    hotel_response, next_stage_hotel = "", 0

    # Process the destination input
    if destination.strip():
        intent = predict_intent(destination)
        entities = extract_entities(destination)
        destination_response, next_stage = generate_response(intent, entities, destination, follow_up_stage)

    # Process the weather input
    if weather_input.strip():
        weather_response, next_stage_weather = chatbot_response(weather_input, follow_up_stage)

    # Process the restaurant input
    if restaurant_input.strip():
        restaurant_response, next_stage_restaurant = chatbot_response(restaurant_input, follow_up_stage)

    # Process the hotel input
    if hotel_input.strip():
        hotel_response, next_stage_hotel = chatbot_response(hotel_input, follow_up_stage)

    return weather_response, restaurant_response, hotel_response

iface = gr.Interface(
    fn=gradio_interface,
    inputs=[
        gr.Textbox(label="Enter your destination"),
        gr.Textbox(label="Ask about your destination's weather"),
        gr.Textbox(label="Ask about restaurants near your destination"),
        gr.Textbox(label="Ask about hotels near your destination")
    ],
    outputs=[
        gr.Textbox(label="Destination's Weather"),
        gr.Textbox(label="Destination's Restaurants"),
        gr.Textbox(label="Destination's Hotels")
    ],
    live=True,
    theme="dark",
    title="Voyage Vibes"
)

iface.launch()