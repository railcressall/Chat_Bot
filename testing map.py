# -*- coding: utf-8 -*-
"""Voyage_Vibes_Gradio_Interface.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EgNvfpRIcCFijbJnIy4qmRTkDeBoIT1y
"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score
import requests
import spacy
import gradio as gr

# Replace with your actual API keys
GEOPIFY_API_KEY = 'a3bb96df28d14c618173fbc519563824'
OPENWEATHER_API_KEY = 'cb84bcfbcbd5a92415a0c484b57886c8'

# Training data
data = [
    ("I want to travel to Houston", "city_query"),
    ("I wanna go to Salt Lake City", "city_query"),
    ("I want to visit Chicago", "city_query"),
    ("Oregon", "city_query"),
    ("San Diego", "city_query"),
    ("Boston", "city_query"),
    ("Las Vegas", "city_query"),
    ("Tucson", "city_query"),
    ("El Paso", "city_query"),
    ("Boise", "city_query"),
    ("What's the weather like?", "weather_query"),
    ("Can you tell me the weather in Chicago?", "weather_query"),
    ("What's the temperature in Seattle?", "weather_query"),
    ("Help me with the weather forecast", "weather_query"),
    ("How hot is it in San Francisco?", "weather_query"),
    ("Food in San Jose", "restaurant_query"),
    ("Restaurants in Phoenix", "restaurant_query"),
    ("Are there any restaurants in Baltimore?", "restaurant_query"),
    ("I wanna grab food in Detroit", "restaurant_query"),
    ("Places to eat in Austin", "restaurant_query"),
    ("Hotels in New York City", "hotel_query"),
    ("Where can I stay in Los Angeles?", "hotel_query"),
    ("Find me a place to stay in Miami", "hotel_query"),
    ("Accommodations in Orlando", "hotel_query"),
    ("Are there any hotels in Denver?", "hotel_query"),
    ("Looking for a hotel in Nashville", "hotel_query"),
    ("Where to stay in Atlanta", "hotel_query"),
    ("Book a hotel in Dallas", "hotel_query"),
    ("Best hotels in Seattle", "hotel_query"),
    ("Can you suggest a hotel in Las Vegas?", "hotel_query"),
    # Additional examples
    ("Show me places in Austin", "city_query"),
    ("I need information about Seattle", "city_query"),
    ("Tell me about places to visit in Denver", "city_query"),
    ("What's happening in Portland?", "city_query"),
    ("I’m looking for details about Orlando", "city_query"),
    ("Give me info on Philadelphia", "city_query"),
    ("What’s going on in Miami?", "city_query"),
    ("I want to know about San Francisco", "city_query"),
    ("Can you tell me about Boston?", "city_query"),
    ("I’m interested in New Orleans", "city_query"),
    ("What's the current weather in Boston?", "weather_query"),
    ("How's the weather in New York City today?", "weather_query"),
    ("Tell me the temperature in Denver", "weather_query"),
    ("What's the forecast for Miami?", "weather_query"),
    ("Can you give me the weather report for Chicago?", "weather_query"),
    ("Is it raining in Seattle?", "weather_query"),
    ("How cold is it in Minneapolis?", "weather_query"),
    ("What's the humidity like in San Diego?", "weather_query"),
    ("Tell me if it’s sunny in Las Vegas", "weather_query"),
    ("What’s the weather in San Jose?", "weather_query"),
    ("Where can I eat in Dallas?", "restaurant_query"),
    ("Find me some good restaurants in San Diego", "restaurant_query"),
    ("What are the top places to eat in Houston?", "restaurant_query"),
    ("Any restaurant recommendations for Seattle?", "restaurant_query"),
    ("Show me dining options in San Francisco", "restaurant_query"),
    ("Are there any good eateries in Portland?", "restaurant_query"),
    ("Where can I get food in Miami?", "restaurant_query"),
    ("Best places to eat in Austin", "restaurant_query"),
    ("Restaurant suggestions for New York City", "restaurant_query"),
    ("Where should I dine in Chicago?", "restaurant_query"),
    ("What are the best hotels in San Francisco?", "hotel_query"),
    ("Find hotels in Seattle for me", "hotel_query"),
    ("Where can I stay in Boston?", "hotel_query"),
    ("Can you recommend hotels in Los Angeles?", "hotel_query"),
    ("What’s a good place to stay in Miami?", "hotel_query"),
    ("Show me hotel options in Dallas", "hotel_query"),
    ("Find accommodation in San Diego", "hotel_query"),
    ("Hotels available in New York City?", "hotel_query"),
    ("Suggest a hotel in Denver", "hotel_query"),
    ("Where can I book a hotel in Chicago?", "hotel_query"),
    ("Where to stay in Las Vegas", "hotel_query"),
    # General examples
    ("I want to visit a new city", "city_query"),
    ("Tell me about the local weather", "weather_query"),
    ("Where can I find places to eat?", "restaurant_query"),
    ("Find me a place to stay", "hotel_query")
]

X, y = zip(*data)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a text classification pipeline with TF-IDF and RandomForestClassifier
model = Pipeline([
    ('vectorizer', TfidfVectorizer()),
    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))
])

# Train the model
model.fit(X_train, y_train)

# Compute cross-validated accuracy
cv_scores = cross_val_score(model, X, y, cv=5)
mean_cv_accuracy = cv_scores.mean()

# Compute model accuracy on test set
y_pred = model.predict(X_test)
test_accuracy = accuracy_score(y_test, y_pred)

# Load spaCy model
nlp = spacy.load('en_core_web_sm')

# Define prediction and extraction functions
def predict_intent(user_input):
    return model.predict([user_input.lower()])[0]

def extract_entities(user_input):
    doc = nlp(user_input)
    return {ent.label_: ent.text for ent in doc.ents}

def get_location_coordinates(location):
    geocoding_url = f"https://api.geoapify.com/v1/geocode/search?text={location}&apiKey={GEOPIFY_API_KEY}"
    geo_response = requests.get(geocoding_url)

    if geo_response.status_code == 200:
        geo_data = geo_response.json()
        if geo_data['features']:
            coordinates = geo_data['features'][0]['geometry']['coordinates']
            return coordinates[0], coordinates[1]
    return None, None

def get_places(location, category):
    longitude, latitude = get_location_coordinates(location)
    if longitude is None:
        return []

    endpoint_url = "https://api.geoapify.com/v2/places"
    radius = 1000
    filters = f"circle:{longitude},{latitude},{radius}"
    bias = f"proximity:{longitude},{latitude}"
    
    params = {
        "filter": filters,
        "limit": 20,
        "bias": bias,
        "categories": category,
        "apiKey": GEOPIFY_API_KEY
    }

    response = requests.get(endpoint_url, params=params)
    if response.status_code == 200:
        results = response.json().get('features', [])
        places = [
            {
                'name': result['properties'].get('name'),
                'latitude': result['geometry']['coordinates'][1],
                'longitude': result['geometry']['coordinates'][0]
            }
            for result in results if result['properties'].get('name') and result['properties'].get('name') != 'Unnamed'
        ]
        return places
    return []

def get_weather(location):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={OPENWEATHER_API_KEY}"
    response = requests.get(url)
    return response.json() if response.status_code == 200 else None

def generate_full_response(location):
    weather_data = get_weather(location)
    restaurants_data = get_places(location, "catering.restaurant")
    hotels_data = get_places(location, "accommodation.hotel")

    # Construct weather response
    weather_response = ""
    if weather_data:
        description = weather_data['weather'][0]['description']
        temp_kelvin = weather_data['main']['temp']
        temp_fahrenheit = round((temp_kelvin - 273.15) * 9/5 + 32)
        weather_response = f"The temperature in {location} is currently {temp_fahrenheit}°F with {description}."

    # Construct restaurant response
    restaurant_response = "Restaurants:\n" + "\n".join([place['name'] for place in restaurants_data]) if restaurants_data else "No restaurants found."

    # Construct hotel response
    hotel_response = "Hotels:\n" + "\n".join([place['name'] for place in hotels_data]) if hotels_data else "No hotels found."

    # Generate HTML content for Leaflet map
    map_html = ""
    if restaurants_data or hotels_data:
        map_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Places Map</title>
            <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
            <style>
                #map {{
                    height: 600px;
                    width: 100%;
                }}
            </style>
        </head>
        <body>
            <div id="map"></div>
            <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
            <script>
                var latitude = {restaurants_data[0]['latitude'] if restaurants_data else hotels_data[0]['latitude']};
                var longitude = {restaurants_data[0]['longitude'] if restaurants_data else hotels_data[0]['longitude']};

                var map = L.map('map').setView([latitude, longitude], 14);

                L.tileLayer('https://maps.geoapify.com/v1/tile/osm-bright/{{z}}/{{x}}/{{y}}.png?apiKey={GEOPIFY_API_KEY}', {{
                    maxZoom: 19
                }}).addTo(map);

                var restaurants = {restaurants_data};
                var hotels = {hotels_data};

                var restaurantIcon = L.icon({{
                    iconUrl: 'https://api.geoapify.com/v1/icon/?type=awesome&color=%23d92241&icon=restaurant&iconType=material&apiKey={GEOPIFY_API_KEY}',
                    iconSize: [31, 46],
                    iconAnchor: [15.5, 42],
                    popupAnchor: [0, -45]
                }});

                restaurants.forEach(function(place) {{
                    L.marker([place.latitude, place.longitude], {{icon: restaurantIcon}})
                        .addTo(map)
                        .bindPopup('<b>Restaurant:</b> ' + place.name);
                }});

                var hotelIcon = L.icon({{
                    iconUrl: 'https://api.geoapify.com/v1/icon/?type=awesome&color=%235a5ed3&icon=hotel&iconType=material&apiKey={GEOPIFY_API_KEY}',
                    iconSize: [31, 46],
                    iconAnchor: [15.5, 42],
                    popupAnchor: [0, -45]
                }});

                hotels.forEach(function(place) {{
                    L.marker([place.latitude, place.longitude], {{icon: hotelIcon}})
                        .addTo(map)
                        .bindPopup('<b>Hotel:</b> ' + place.name);
                }});
            </script>
        </body>
        </html>
        """
    else:
        map_html = "No places found."

    return weather_response, restaurant_response, hotel_response, map_html

# Create and launch the Gradio interface
iface = gr.Interface(
    fn=generate_full_response,
    inputs=gr.Textbox(label="Enter your voyage destination"),
    outputs=[
        gr.Textbox(label="Weather"),
        gr.Textbox(label="Restaurants"),
        gr.Textbox(label="Hotels"),
        gr.HTML(label="Map")
    ],
    title="Voyage Vibes"
)

iface.launch(share=True)